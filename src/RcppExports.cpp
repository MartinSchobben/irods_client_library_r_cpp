// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// icd
std::string icd(std::string rods_path, bool verbose);
RcppExport SEXP rirods_icd(SEXP rods_pathSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type rods_path(rods_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(icd(rods_path, verbose));
    return __result;
END_RCPP
}
// icp
std::string icp(std::string src_path, std::string dest_path, bool force, bool calculate_checksum, bool checksum, bool progress, bool verbose);
RcppExport SEXP rirods_icp(SEXP src_pathSEXP, SEXP dest_pathSEXP, SEXP forceSEXP, SEXP calculate_checksumSEXP, SEXP checksumSEXP, SEXP progressSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type src_path(src_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type dest_path(dest_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type force(forceSEXP);
    Rcpp::traits::input_parameter< bool >::type calculate_checksum(calculate_checksumSEXP);
    Rcpp::traits::input_parameter< bool >::type checksum(checksumSEXP);
    Rcpp::traits::input_parameter< bool >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(icp(src_path, dest_path, force, calculate_checksum, checksum, progress, verbose));
    return __result;
END_RCPP
}
// iexit
void iexit(bool full);
RcppExport SEXP rirods_iexit(SEXP fullSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< bool >::type full(fullSEXP);
    iexit(full);
    return R_NilValue;
END_RCPP
}
// iinit
int iinit(std::string pass);
RcppExport SEXP rirods_iinit(SEXP passSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type pass(passSEXP);
    __result = Rcpp::wrap(iinit(pass));
    return __result;
END_RCPP
}
// imeta_qu
Rcpp::DataFrame imeta_qu(const std::string& src_type, const std::string& query);
RcppExport SEXP rirods_imeta_qu(SEXP src_typeSEXP, SEXP querySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type src_type(src_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type query(querySEXP);
    __result = Rcpp::wrap(imeta_qu(src_type, query));
    return __result;
END_RCPP
}
// imeta_ls
Rcpp::DataFrame imeta_ls(const std::string& type, const std::string& name, const std::string& attribute);
RcppExport SEXP rirods_imeta_ls(SEXP typeSEXP, SEXP nameSEXP, SEXP attributeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type attribute(attributeSEXP);
    __result = Rcpp::wrap(imeta_ls(type, name, attribute));
    return __result;
END_RCPP
}
// imeta_lsw
Rcpp::DataFrame imeta_lsw(const std::string& type, const std::string& name, const std::string& avu);
RcppExport SEXP rirods_imeta_lsw(SEXP typeSEXP, SEXP nameSEXP, SEXP avuSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type avu(avuSEXP);
    __result = Rcpp::wrap(imeta_lsw(type, name, avu));
    return __result;
END_RCPP
}
// imeta_rmw
int imeta_rmw(const std::string& type, const std::string& name, const std::string& avu);
RcppExport SEXP rirods_imeta_rmw(SEXP typeSEXP, SEXP nameSEXP, SEXP avuSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type avu(avuSEXP);
    __result = Rcpp::wrap(imeta_rmw(type, name, avu));
    return __result;
END_RCPP
}
// imeta_cp
int imeta_cp(const std::string& src_type, const std::string& dst_type, const std::string& src_name, const std::string& dst_name);
RcppExport SEXP rirods_imeta_cp(SEXP src_typeSEXP, SEXP dst_typeSEXP, SEXP src_nameSEXP, SEXP dst_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type src_type(src_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dst_type(dst_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type src_name(src_nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type dst_name(dst_nameSEXP);
    __result = Rcpp::wrap(imeta_cp(src_type, dst_type, src_name, dst_name));
    return __result;
END_RCPP
}
// imeta_mod
int imeta_mod(const std::string& src_type, const std::string& src_name, const std::string& old_avu, const std::string& new_avu);
RcppExport SEXP rirods_imeta_mod(SEXP src_typeSEXP, SEXP src_nameSEXP, SEXP old_avuSEXP, SEXP new_avuSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type src_type(src_typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type src_name(src_nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type old_avu(old_avuSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type new_avu(new_avuSEXP);
    __result = Rcpp::wrap(imeta_mod(src_type, src_name, old_avu, new_avu));
    return __result;
END_RCPP
}
// imeta_set
int imeta_set(const std::string& type, const std::string& name, const std::string& avu);
RcppExport SEXP rirods_imeta_set(SEXP typeSEXP, SEXP nameSEXP, SEXP avuSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type type(typeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type avu(avuSEXP);
    __result = Rcpp::wrap(imeta_set(type, name, avu));
    return __result;
END_RCPP
}
// imkdir
std::string imkdir(std::string rods_path, bool parents);
RcppExport SEXP rirods_imkdir(SEXP rods_pathSEXP, SEXP parentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type rods_path(rods_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type parents(parentsSEXP);
    __result = Rcpp::wrap(imkdir(rods_path, parents));
    return __result;
END_RCPP
}
// imv
std::string imv(std::string src_path, std::string dest_path, bool verbose);
RcppExport SEXP rirods_imv(SEXP src_pathSEXP, SEXP dest_pathSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type src_path(src_pathSEXP);
    Rcpp::traits::input_parameter< std::string >::type dest_path(dest_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(imv(src_path, dest_path, verbose));
    return __result;
END_RCPP
}
// ipwd
std::string ipwd();
RcppExport SEXP rirods_ipwd() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(ipwd());
    return __result;
END_RCPP
}
// irm
int irm(std::string rods_path, bool recursive, bool verbose, bool force);
RcppExport SEXP rirods_irm(SEXP rods_pathSEXP, SEXP recursiveSEXP, SEXP verboseSEXP, SEXP forceSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type rods_path(rods_pathSEXP);
    Rcpp::traits::input_parameter< bool >::type recursive(recursiveSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type force(forceSEXP);
    __result = Rcpp::wrap(irm(rods_path, recursive, verbose, force));
    return __result;
END_RCPP
}
